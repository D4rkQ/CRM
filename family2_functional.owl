Prefix(:=<http://www.reutlingen-university.de/ontologies/family2.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.reutlingen-university.de/ontologies/family2.owl>

Declaration(Class(:Boy))
SubClassOf(:Boy :Child)
DisjointClasses(:Boy :Girl)
Declaration(Class(:Child))
EquivalentClasses(:Child ObjectUnionOf(:Girl :Boy))
SubClassOf(:Child ObjectExactCardinality(1 :hasFather :Father))
SubClassOf(:Child ObjectExactCardinality(1 :hasMother :Mother))
SubClassOf(:Child ObjectExactCardinality(2 :hasParent :Parent))
Declaration(Class(:Father))
SubClassOf(:Father :Parent)
Declaration(Class(:Girl))
SubClassOf(:Girl :Child)
DisjointClasses(:Girl :Boy)
Declaration(Class(:Mother))
SubClassOf(:Mother :Parent)
Declaration(Class(:Parent))
EquivalentClasses(:Parent ObjectUnionOf(:Mother :Father))
SubClassOf(:Parent ObjectSomeValuesFrom(:hasChild :Child))
Declaration(ObjectProperty(:hasBrother))
SubObjectPropertyOf(:hasBrother :hasSibling)
Declaration(ObjectProperty(:hasChild))
InverseObjectProperties(:hasParent :hasChild)
ObjectPropertyDomain(:hasChild :Parent)
ObjectPropertyRange(:hasChild :Child)
Declaration(ObjectProperty(:hasDaughter))
SubObjectPropertyOf(:hasDaughter :hasChild)
ObjectPropertyRange(:hasDaughter :Girl)
DisjointObjectProperties(:hasDaughter :hasSon)
Declaration(ObjectProperty(:hasFather))
SubObjectPropertyOf(:hasFather :hasParent)
ObjectPropertyRange(:hasFather :Father)
DisjointObjectProperties(:hasFather :hasMother)
Declaration(ObjectProperty(:hasHusband))
SubObjectPropertyOf(:hasHusband :hasSpouse)
InverseObjectProperties(:hasHusband :hasWife)
Declaration(ObjectProperty(:hasMother))
SubObjectPropertyOf(:hasMother :hasParent)
ObjectPropertyRange(:hasMother :Mother)
DisjointObjectProperties(:hasMother :hasFather)
Declaration(ObjectProperty(:hasParent))
InverseObjectProperties(:hasParent :hasChild)
ObjectPropertyDomain(:hasParent :Child)
ObjectPropertyRange(:hasParent :Parent)
Declaration(ObjectProperty(:hasSibling))
SymmetricObjectProperty(:hasSibling)
Declaration(ObjectProperty(:hasSister))
SubObjectPropertyOf(:hasSister :hasSibling)
Declaration(ObjectProperty(:hasSon))
SubObjectPropertyOf(:hasSon :hasChild)
ObjectPropertyRange(:hasSon :Boy)
DisjointObjectProperties(:hasSon :hasDaughter)
Declaration(ObjectProperty(:hasSpouse))
Declaration(ObjectProperty(:hasWife))
SubObjectPropertyOf(:hasWife :hasSpouse)
InverseObjectProperties(:hasHusband :hasWife)
Declaration(NamedIndividual(:Clara))
ClassAssertion(:Girl :Clara)
ObjectPropertyAssertion(:hasBrother :Clara :Klaus)
Declaration(NamedIndividual(:Hans))
ClassAssertion(:Father :Hans)
ObjectPropertyAssertion(:hasWife :Hans :Marta)
Declaration(NamedIndividual(:Klaus))
ClassAssertion(:Boy :Klaus)
ObjectPropertyAssertion(:hasSister :Klaus :Clara)
Declaration(NamedIndividual(:Marta))
ClassAssertion(:Mother :Marta)
ObjectPropertyAssertion(:hasHusband :Marta :Hans)
DifferentIndividuals(:Klaus :Hans)
DifferentIndividuals(:Marta :Hans)
DifferentIndividuals(:Hans :Clara)
DifferentIndividuals(:Marta :Clara)
DifferentIndividuals(:Marta :Klaus)
DifferentIndividuals(:Klaus :Clara)
)
